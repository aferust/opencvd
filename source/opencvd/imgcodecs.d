/*
Copyright (c) 2019 Ferhat Kurtulmu≈ü
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module opencvd.imgcodecs;

import std.string;

import opencvd.cvcore;

private {
    extern (C) @nogc nothrow {
        Mat Image_IMRead(const char* filename, int flags);
        bool Image_IMWrite(const char* filename, Mat img);
        bool Image_IMWrite_WithParams(const char* filename, Mat img, IntVector params);
        ByteArray Image_IMEncode(const char* fileExt, Mat img);
        ByteArray Image_IMEncode_WithParams(const char* fileExt, Mat img, IntVector params);
        Mat Image_IMDecode(ByteArray buf, int flags);
    }
}

enum: int { // ImreadModes
    IMREAD_UNCHANGED = -1, 
    IMREAD_GRAYSCALE = 0, 
    IMREAD_COLOR = 1, 
    IMREAD_ANYDEPTH = 2, 
    IMREAD_ANYCOLOR = 4, 
    IMREAD_LOAD_GDAL = 8, 
    IMREAD_REDUCED_GRAYSCALE_2 = 16, 
    IMREAD_REDUCED_COLOR_2 = 17, 
    IMREAD_REDUCED_GRAYSCALE_4 = 32, 
    IMREAD_REDUCED_COLOR_4 = 33, 
    IMREAD_REDUCED_GRAYSCALE_8 = 64, 
    IMREAD_REDUCED_COLOR_8 = 65, 
    IMREAD_IGNORE_ORIENTATION = 128 
}

enum: int { // 	ImwriteFlags
    IMWRITE_JPEG_QUALITY = 1, 
    IMWRITE_JPEG_PROGRESSIVE = 2, 
    IMWRITE_JPEG_OPTIMIZE = 3, 
    IMWRITE_JPEG_RST_INTERVAL = 4, 
    IMWRITE_JPEG_LUMA_QUALITY = 5, 
    IMWRITE_JPEG_CHROMA_QUALITY = 6, 
    IMWRITE_PNG_COMPRESSION = 16, 
    IMWRITE_PNG_STRATEGY = 17, 
    IMWRITE_PNG_BILEVEL = 18, 
    IMWRITE_PXM_BINARY = 32, 
    IMWRITE_EXR_TYPE = (3 << 4) + 0, 
    IMWRITE_WEBP_QUALITY = 64, 
    IMWRITE_PAM_TUPLETYPE = 128, 
    IMWRITE_TIFF_RESUNIT = 256, 
    IMWRITE_TIFF_XDPI = 257, 
    IMWRITE_TIFF_YDPI = 258, 
    IMWRITE_TIFF_COMPRESSION = 259, 
    IMWRITE_JPEG2000_COMPRESSION_X1000 = 272 
}

enum: int { // ImwriteEXRTypeFlags
    IMWRITE_EXR_TYPE_HALF = 1, 
    IMWRITE_EXR_TYPE_FLOAT = 2 
}

enum: int { // ImwritePAMFlags
    IMWRITE_PAM_FORMAT_NULL = 0, 
    IMWRITE_PAM_FORMAT_BLACKANDWHITE = 1, 
    IMWRITE_PAM_FORMAT_GRAYSCALE = 2, 
    IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA = 3, 
    IMWRITE_PAM_FORMAT_RGB = 4, 
    IMWRITE_PAM_FORMAT_RGB_ALPHA = 5 
}
 
enum: int { // ImwritePNGFlags
    IMWRITE_PNG_STRATEGY_DEFAULT = 0, 
    IMWRITE_PNG_STRATEGY_FILTERED = 1, 
    IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY = 2, 
    IMWRITE_PNG_STRATEGY_RLE = 3, 
    IMWRITE_PNG_STRATEGY_FIXED = 4 
}

Mat imread(const char* filename, int flags){
    return Image_IMRead(filename, flags);
}

Mat imread(string filename, int flags = IMREAD_UNCHANGED) @nogc nothrow {
    return Image_IMRead(filename.ptr, flags);
}

bool imwrite(const char* filename, Mat img){
    return Image_IMWrite(filename, img);
}

bool imwrite(string filename, Mat img) @nogc nothrow {
    return Image_IMWrite(filename.ptr, img);
}

bool imwrite(string filename, Mat img, int[] params) @nogc nothrow {
    return Image_IMWrite_WithParams(filename.ptr, img, IntVector(params.ptr, cast(int)params.length));
}

ubyte[] imencode(string fileExt, Mat img) @nogc nothrow {
    ByteArray ba = Image_IMEncode(fileExt.ptr, img);
    return ba.data[0..ba.length];
}

ubyte[] imencode(string fileExt, Mat img, int[] params) @nogc nothrow {
    ByteArray ba = Image_IMEncode_WithParams(fileExt.ptr, img, IntVector(params.ptr, cast(int)params.length));
    return ba.data[0..ba.length];
}

Mat imdecode(ubyte[] buf, int flags) @nogc nothrow {
    return Image_IMDecode(ByteArray(buf.ptr, cast(int)buf.length), flags);
}

